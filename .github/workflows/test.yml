name: Run k6 Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: >-
          --name mysql-container
          --health-cmd="mysqladmin ping --silent" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: node-complete
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install server dependencies
      run: |
        cd server
        yarn install

    - name: Configure MySQL
      run: |
        # Wait for the MySQL container to be healthy before configuring it
        for i in {60..0}; do
          if [ "$(docker inspect -f '{{.State.Health.Status}}' mysql-container)" = "healthy" ]; then
            echo "MySQL container is healthy"
            break
          fi
          echo 'Waiting for MySQL container to be healthy...'
          sleep 2
        done
        if [ "$i" = 0 ]; then
          echo "MySQL container did not become healthy in time"
          exit 1
        fi

        docker exec mysql-container mysql -u root -ppassword -e "ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';"

    - name: Wait for MySQL to be ready
      run: |
        for i in {60..0}; do
          if docker exec mysql-container mysqladmin ping --host=127.0.0.1 --user=root --password=password --silent; then
            echo "MySQL is up and running"
            break
          fi
          echo 'Waiting for MySQL to be ready...'
          sleep 2
        done
        if [ "$i" = 0 ]; then
          echo "MySQL did not become ready in time"
          exit 1
        fi

    - name: Print MySQL logs
      run: |
        if docker ps --filter name=mysql-container --filter status=running | grep mysql-container; then
          docker logs mysql-container
        else
          echo "MySQL container not found"
          exit 1
        fi

    - name: Start the server
      run: |
        cd server
        nohup yarn start > server.log 2>&1 &
        disown

    - name: Wait for server to be ready
      run: |
        for i in {60..0}; do
          if curl -s http://127.0.0.1:3000 > /dev/null; then
            echo "Server is up and running"
            break
          fi
          echo 'Waiting for server to be ready...'
          sleep 2
        done
        if [ "$i" = 0 ]; then
          echo "Server did not become ready in time"
          cat server/server.log
          exit 1
        fi

    - name: Run k6 tests
      run: |
        sudo apt-get install -y k6
        k6 run testing/test.js

    - name: Clean up server
      run: |
        pkill -f "yarn start"
